{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","constants.js","containers/App.js","actions.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","this","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45d7f5d1.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    //Using tachyon classes to style the cards\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img src={`https://robohash.org/${id}?200x200`} alt='robot' />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n            />\n          );\n        })\n      }\n    </div>\n  );\n}\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchField, searchChange}) => {\n  return (\n    <div className = \"pa2\">\n      <input \n        className = 'pa3 ba b--green bg-lightest-blue' \n        type=\"search\" \n        placeholder='search robots'\n        onChange = {searchChange}\n        />\n    </div>\n  )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px' }}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","//import { render } from '@testing-library/react';\nimport React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport { requestRobots, setSearchField} from '../actions'\n\nconst mapStateToProps = state => {\n  return( {\n    'searchField': state.searchRobots.searchField,\n    'robots' : state.requestRobots.robots,\n    'isPending': state.requestRobots.isPending,\n    'error': state.requestRobots.error\n  })\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    //destructuring so that we can use robots and searchField without this.state every time\n    const {searchField, onSearchChange, robots, isPending} = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n    //ternary statement with return before the statement\n    return isPending ? <h1>Loading</h1> :\n      (\n        <div className='tc' >\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_PENDING\n} from './constants'\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING});\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch(error => {dispatch({type: REQUEST_ROBOTS_FAILED, payload: error})\n})\n}","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_PENDING\n} from './constants'\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, {searchField : action.payload} )\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robot: [],\n  error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n    return Object.assign({}, state, {isPending: true}\n      \n      )\n    \n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {robots: action.payload, isPending:false})\n\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {error: action.payload, isPending: false})\n    \n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport {Provider} from 'react-redux';\nimport {applyMiddleware, createStore, combineReducers} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers';\nimport {createLogger} from 'redux-logger';\n//import reportWebVitals from './reportWebVitals';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}