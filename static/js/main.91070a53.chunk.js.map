{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAeeA,EAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC1B,OAEE,yBAAKC,UAAY,uDACf,yBAAKC,IAAG,+BAA4BF,EAA5B,YAA0CG,IAAM,UACxD,6BACE,4BAAKL,GACL,2BAAIC,MCYGK,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,EAAD,CACAC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCEdW,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC/B,OACE,yBAAKX,UAAY,OACf,2BACEA,UAAY,mCACZY,KAAK,SACLC,YAAY,gBACZC,SAAYH,MCCLI,EARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEJ,EAAMK,WCwCEC,G,wDArCb,aAAe,IAAD,8BACZ,gBAaFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEf,YAAac,EAAME,OAAOC,SAb1C,EAAKC,MAAQ,CACXxB,OAAQ,GACRM,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBmB,MAAM,6CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAAErB,OAAQ6B,S,oBAO3C,WAEE,MAAgCC,KAAKN,MAA7BxB,EAAR,EAAQA,OAAQM,EAAhB,EAAgBA,YACVyB,EAAiB/B,EAAOgC,QAAO,SAAAC,GACnC,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS7B,EAAY4B,kBAIvD,OACI,yBAAKtC,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcuB,KAAKX,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUnB,OAAQ+B,U,GAhCZK,cCAlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.91070a53.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) => {\n  return (\n    //Using tachyon classes to style the cards\n    <div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img src = {`https://robohash.org/${id}?200x200`} alt = 'robot' />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card \n            key={i} \n            id={robots[i].id} \n            name={robots[i].name} \n            email={robots[i].email}\n            />\n          );\n        })\n      }\n    </div>\n  );\n}\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchField, searchChange}) => {\n  return (\n    <div className = \"pa2\">\n      <input \n        className = 'pa3 ba b--green bg-lightest-blue' \n        type=\"search\" \n        placeholder='search robots'\n        onChange = {searchChange}\n        />\n    </div>\n  )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px' }}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","//import { render } from '@testing-library/react';\nimport React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('http://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ robots: users }))\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value })\n  }\n\n  render() {\n    //destructuring so that we can use robots and searchField without this.state every time\n    const { robots, searchField } = this.state;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n    //ternary statement with return before the statement\n    //return !robots.length ? <h1>Loading</h1> :\n    return  (\n        <div className='tc' >\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={this.onSearchChange} />\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}